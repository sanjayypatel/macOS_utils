#!/bin/zsh
# zjamf is zsh script that provides Jamf api functionality at the command line.

##### Variables
jamf_url=$( /usr/bin/defaults read /Library/Preferences/com.jamfsoftware.jamf.plist jss_url )
token_file="$HOME/.jamf_token.plist"
defaults write $token_file tokenContinue -string "false"
udid=$( /usr/sbin/ioreg -rd1 -c IOPlatformExpertDevice | awk '/IOPlatformUUID/ { split($0, line, "\""); printf("%s\n", line[4]); }' )

##### Functions

# curl Functions
curl_post_Jamf(){
    api_endpoint="${1}"
    token=$( defaults read $token_file token)
    /usr/bin/curl -s \
    -k "${jamf_url}${api_endpoint}" \
    -H "authorization: Bearer ${token}" \
    -X POST
}
curl_get_Jamf(){
    api_endpoint="${1}"
    token=$( defaults read $token_file token)
    /usr/bin/curl -s \
    -k "${jamf_url}${api_endpoint}" \
    -H "authorization: Bearer ${token}" \
    -X GET
}

get_jamf_token() {
    # Prompt for authentication
    echo "===== ===== ===== ===== ====="
    echo "This script requires a Jamf login to ${jamf_url}"
    echo "Jamf Username:"
    read input_jamf_user
    echo "Jamf Password:"
    read -s input_jamf_password
    # encode credentials for subsequent token request
    encoded_credentials=$( printf "$input_jamf_user:$input_jamf_password" | /usr/bin/iconv -t ISO-8859-1 | /usr/bin/base64 -i - )
    # Use our base64 creds to generate a temporary API access token in JSON form
    # Use tr to strip out line feeds or the JXA will not like the input
    # Retrieve the read token from the JSON response
    json_response=$( /usr/bin/curl -s "${jamf_url}api/v1/auth/token" -H "authorization: Basic ${encoded_credentials}" -X POST | tr -d "\n" )
    token=$( /usr/bin/osascript -l 'JavaScript' -e "JSON.parse(\`$json_response\`).token" )
    token_expiration=$( /usr/bin/osascript -l 'JavaScript' -e "JSON.parse(\`$json_response\`).expires" | sed 's/\..*//' )
    # convert the expiration time to Unix Epoch
    token_expiration_epoch=$( TZ=UTC0 date -j -f "%Y-%m-%dT%T" "$token_expiration" +"%s" )
    defaults write $token_file token -string "$token"
    defaults write $token_file expiration -string "$token_expiration_epoch"
}

is_token_valid() {
    # Verify if token file exists
    if [ ! -f $token_file ]
    then
        echo "Token file not found. Getting a new token."
        defaults write $token_file tokenContinue -string "false"
        get_jamf_token
    fi
    # If token exists, check expiration
    now_epoch=$( date +%s )
    expiration_epoch=$( defaults read $token_file expiration )

    if [ $expiration_epoch -lt $now_epoch ]
    then
        echo "Token expired. Getting a new token."
        get_jamf_token
    else
        echo "Jamf token valid."
    fi

}

invalidate_jamf_token() {
    curl_post_Jamf "api/v1/auth/invalidate-token"
    echo "Token invalidated. Removing token file."
    rm $token_file
}

get_jamf_version() {
    json_response=$( curl_get_Jamf "api/v1/jamf-pro-version" )
    version=$( /usr/bin/osascript -l 'JavaScript' -e "JSON.parse(\`$json_response\`).version" )
    echo "Jamf Version"
    echo $version
}

get_jamf_computer_id() {
    json_response=$( curl_get_Jamf "api/v1/computers-inventory?section=USER_AND_LOCATION&filter=udid%3D%3D%22${udid}%22" )
    #echo $json_response
    computer_id=$( /usr/bin/osascript -l 'JavaScript' -e "JSON.parse(\`$json_response\`).results[0].id" )
    user_and_location=$( /usr/bin/osascript -l 'JavaScript' -e "JSON.parse(\`$json_response\`).results[0].userAndLocation" )
    echo "Computer Info:"
    echo "$user_and_location"
}

# Initial Token Check
is_token_valid

while getopts ":vct" option; do
    case $option in
        t) # do not invalidate token after running
            defaults write $token_file tokenContinue -string "true"
            ;;
        v) # Jamf Version
            get_jamf_version
            ;;
        c) # Get this computer ID from Jamf
            get_jamf_computer_id
            ;;
        \?) # incorrect option
            echo "Error: Invalid option"
            exit 1;;
    esac
done

# Check if token is allowed to continue
token_continue=$( defaults read $token_file tokenContinue )
if [[ "$token_continue" == "false" ]]
then
    invalidate_jamf_token
fi